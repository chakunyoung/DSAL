정의: 같은 부분 문제가 반복될 때, 이미 계산된 "최적의 것"을 사용한다.

규칙을 찾아 점화식을 구한다.

*** 최적의 값을 해당 idx 에 기억해둔다. ***
memo[현재 idx] = memo[이전 idx] // 자기자신의 값을 사용할 때도 있다.

-------------------------------------------
1. 항이 있다 (순서) -> -> ->
[점화식을 세울 수 있다 - 점화식은 순서를 가진 어떤 것]
d(2) = d(1) + d(0) // 피보나치

2. (초기값)을 정해줘야한다.

3. 2차원일 수 도 있다. "한 순서"에서 여러값이 존재 => 상태가 여러개
-------------------------------------------

[탑 다운]
계산한 적이 있다면, 해당 부분을 사용
if( memo[i] != 0)
    사용
else // 0이라면 계산된 적이 없음
    재귀

[바텀 업]
바텀업이 직관적이고 편하다.
이전 memo[i] 사용

----------------------------------------------
brute force 로 먼저 풀이를 생각 -> memoization 이용 하는 방법 생각
DP는 당장 여러 경우를 생각하지 않는다. 단순하게 문제상황에서 "2개" 를 본다. // 이전상황 -> 지금상황